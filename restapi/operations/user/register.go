// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RegisterHandlerFunc turns a function with the right signature into a register handler
type RegisterHandlerFunc func(RegisterParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterHandlerFunc) Handle(params RegisterParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// RegisterHandler interface for that can handle valid register params
type RegisterHandler interface {
	Handle(RegisterParams, interface{}) middleware.Responder
}

// NewRegister creates a new http.Handler for the register operation
func NewRegister(ctx *middleware.Context, handler RegisterHandler) *Register {
	return &Register{Context: ctx, Handler: handler}
}

/* Register swagger:route POST /register user register

Register a new user to the app

Register the new user and return the success notification

*/
type Register struct {
	Context *middleware.Context
	Handler RegisterHandler
}

func (o *Register) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewRegisterParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

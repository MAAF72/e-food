// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "E-Food",
    "version": "1.0.0"
  },
  "host": "e-food.com",
  "basePath": "/v1",
  "paths": {
    "/categories": {
      "get": {
        "security": [
          {
            "AppID": [],
            "Bearer": []
          }
        ],
        "description": "It returns a list of nested objects which contains all categories and sub-categories required to create menu",
        "tags": [
          "menu"
        ],
        "summary": "Get menu items for the app",
        "operationId": "CategoryList",
        "responses": {
          "200": {
            "description": "List of Categories",
            "schema": {
              "$ref": "#/definitions/Categories"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Categories Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Returns token for authorized User",
        "tags": [
          "user"
        ],
        "summary": "Get authorization token for the app",
        "operationId": "Login",
        "parameters": [
          {
            "description": "Login Payload",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "$ref": "#/definitions/LoginSuccess"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "description": "Register the new user and return the success notification",
        "tags": [
          "user"
        ],
        "summary": "Register a new user to the app",
        "operationId": "Register",
        "parameters": [
          {
            "description": "Register Payload",
            "name": "register",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Register"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful register",
            "schema": {
              "$ref": "#/definitions/RegisterSuccess"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Categories": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Category"
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "bcId": {
          "type": "integer"
        },
        "bcImageUrl": {
          "type": "string"
        },
        "bcIsActive": {
          "type": "boolean"
        },
        "bcName": {
          "type": "string"
        },
        "subCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubCategory"
          }
        }
      }
    },
    "LoginInfo": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LoginSuccess": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "Register": {
      "type": "object",
      "required": [
        "email",
        "name",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "RegisterSuccess": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "SubCategory": {
      "type": "object",
      "properties": {
        "scId": {
          "type": "integer"
        },
        "scImageUrl": {
          "type": "string"
        },
        "scIsActive": {
          "type": "boolean"
        },
        "scName": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "AppID": {
      "type": "string",
      "description": "Identifier of app that request APIs",
      "name": "X-App-ID",
      "in": "header",
      "required": true
    }
  },
  "securityDefinitions": {
    "AppID": {
      "type": "apiKey",
      "name": "X-App-ID",
      "in": "header"
    },
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "AppID": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "E-Food",
    "version": "1.0.0"
  },
  "host": "e-food.com",
  "basePath": "/v1",
  "paths": {
    "/categories": {
      "get": {
        "security": [
          {
            "AppID": [],
            "Bearer": []
          }
        ],
        "description": "It returns a list of nested objects which contains all categories and sub-categories required to create menu",
        "tags": [
          "menu"
        ],
        "summary": "Get menu items for the app",
        "operationId": "CategoryList",
        "responses": {
          "200": {
            "description": "List of Categories",
            "schema": {
              "$ref": "#/definitions/Categories"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Categories Not Found"
          },
          "500": {
            "description": "Server Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Returns token for authorized User",
        "tags": [
          "user"
        ],
        "summary": "Get authorization token for the app",
        "operationId": "Login",
        "parameters": [
          {
            "description": "Login Payload",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "$ref": "#/definitions/LoginSuccess"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "description": "Register the new user and return the success notification",
        "tags": [
          "user"
        ],
        "summary": "Register a new user to the app",
        "operationId": "Register",
        "parameters": [
          {
            "description": "Register Payload",
            "name": "register",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Register"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful register",
            "schema": {
              "$ref": "#/definitions/RegisterSuccess"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Categories": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Category"
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "bcId": {
          "type": "integer"
        },
        "bcImageUrl": {
          "type": "string"
        },
        "bcIsActive": {
          "type": "boolean"
        },
        "bcName": {
          "type": "string"
        },
        "subCategories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubCategory"
          }
        }
      }
    },
    "LoginInfo": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LoginSuccess": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "Register": {
      "type": "object",
      "required": [
        "email",
        "name",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "RegisterSuccess": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "SubCategory": {
      "type": "object",
      "properties": {
        "scId": {
          "type": "integer"
        },
        "scImageUrl": {
          "type": "string"
        },
        "scIsActive": {
          "type": "boolean"
        },
        "scName": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "AppID": {
      "type": "string",
      "description": "Identifier of app that request APIs",
      "name": "X-App-ID",
      "in": "header",
      "required": true
    }
  },
  "securityDefinitions": {
    "AppID": {
      "type": "apiKey",
      "name": "X-App-ID",
      "in": "header"
    },
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "AppID": []
    }
  ]
}`))
}
